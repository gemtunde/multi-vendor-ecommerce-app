// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//coupon
model Coupon{
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  couponCode String 
  expiryDate DateTime
  isActive Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//banner title, imageUrl, link 
model Banner{
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  imageUrl String
  link String 
  isActive Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


//Category
model Category {
   id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String 
  slug       String @unique
  imageUrl  String?
  description String?  
  isActive Boolean 
  
  products  Product[]  
  trainings Training[]  
  marketIds String[] @db.ObjectId
  markets   Market[]   @relation(fields: [marketIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

//Market
model Market {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String     
  slug      String     @unique
  logoUrl    String?    
  description    String?  
  isActive Boolean  
  
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

createdAt     DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}

model Product {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String    
  slug     String    @unique
  isActive Boolean
  imageUrl String?
  description String?
  sku String?
  barcode String?
  productPrice Float 
  salePrice Float 
  tags String[]
  isWholesale Boolean
  unit String?
  wholesalePrice Float?
  wholesaleQty Int?
  productCode String?
  productStock Int?
  qty Int?
  
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String @db.ObjectId
   
   user   User  @relation(fields: [userId], references: [id],onDelete: Cascade, onUpdate: Cascade)
userId String @db.ObjectId

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}


model Training {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String    @unique
  description String?
  content String?
  slug String?
  imageUrl String?
  isActive Boolean

  category   Category?  @relation(fields: [categoryId], references: [id])
  categoryId String @db.ObjectId

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

enum UserRole{
  ADMIN 
  FARMER
  USER
  MODERATOR
}
model FarmerProfile{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String 
  address String?
  code String
  contactPerson String?
  contactPersonPhone String?
  profileImageUrl String?
  email String
  notes String?
  phone String
  terms String?  
  isActive Boolean
  products String[]
  mainCrop String
  landSize Float

  user   User  @relation(fields: [userId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId @unique
  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

// user can be ADMIN, FARMER, CUSTMER, AGENT
model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?   @unique
  password  String 
  emailVerified Boolean @default(false)
  products Product[]
  role     UserRole @default(USER)
  verificationToken String?
  profile  UserProfile?

  farmerProfile FarmerProfile?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

}
// Model for normal user profile
model UserProfile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  // Add other fields for user onboarding information
  // For example:
  dateOfBirth DateTime?
  address    String?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
